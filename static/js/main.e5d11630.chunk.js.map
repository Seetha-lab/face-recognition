{"version":3,"sources":["components/FaceDetection/FaceDetection.js","components/FaceDetectionFunctionality/FaceDetectionFunctionality.js","App.js","serviceWorker.js","index.js"],"names":["FaceDetection","oninput","onsubmit","className","type","name","onChange","onClick","FaceDetectionFunctionality","url","boundingbox","id","alt","src","width","height","style","top","top_row","bottom","bottom_row","left","left_col","right","right_col","app","Clarifai","App","apiKey","particleoptions","particles","number","value","density","enable","value_area","calculatefacevalue","data","apiboxval","outputs","regions","region_info","bounding_box","imgdetail","document","getElementById","imgwidth","Number","imgheight","leftcol","toprow","rightcol","bottomrow","console","log","displayboundingbox","setState","event","inputurl","target","imageurl","state","models","predict","then","response","catch","err","changepage","onpage","this","params","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e5d11630.chunk.js","sourcesContent":["import React from 'react';\nimport './FaceDetection.css';\n\nconst FaceDetection = ({oninput, onsubmit}) => {\n    return(\n        <div className=\"tc\"> \n        <h1> Face Recognition!</h1>\n        <p className=\"f3\"> \n        {`Here you go, will detect beautiful face from your pictures! `} \n        </p> \n        <div className=\"center\">\n        <div className=\"center bg pa4 \" >\n         <input className=\"f4 pa2 w-70 center\" type=\"text\" name=\"url\" onChange={oninput}/>\n         <button className=\"w-30 grow f4 link ph3 pv2 dib white bg-blue pointer\" name=\"detect\" onClick={onsubmit}>Detect</button>\n         </div>\n        </div>\n        </div>\n       \n       )\n\n\n}\n\nexport default FaceDetection;","import React from 'react';\nimport './FaceDetectionFunctionality.css'\n\nconst FaceDetectionFunctionality = ({url,boundingbox}) => {\n    return(\n        <div className=\"center ma\"> \n        <div className=\"absolute mt2\"> \n         <img id=\"image\" alt='!Your pic link please!' src={`${url}`} width=\"500px\" height= \"auto\"/>\n         <div className=\"boundingthebox\" style={{\n             top: boundingbox.top_row,\n             bottom: boundingbox.bottom_row,\n             left: boundingbox.left_col,\n             right: boundingbox.right_col\n             \n             }}>\n        </div>\n         </div>\n        </div>\n       \n       )\n\n\n}\n\nexport default FaceDetectionFunctionality;","import React, { Component } from 'react';\nimport './App.css';\nimport Clarifai from 'clarifai';\nimport Particles from 'react-particles-js';\nimport FaceDetection from './components/FaceDetection/FaceDetection';\nimport FaceDetectionFunctionality from './components/FaceDetectionFunctionality/FaceDetectionFunctionality';\n\nconst app = new Clarifai.App({\n apiKey: 'e8a56bfc00ba4cbd8999424b65639270'\n});\n\nconst particleoptions = {\n         particles: {\n          number: {\n            value: 75,\n          density: {\n            enable: true,\n            value_area: 500\n\n                }\n           }\n        }\n    }\n\n \n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n    inputurl: '',\n    imageurl: '',\n    boundingbox: {\n      left_col: 0,\n      right_col: 0,\n      top_row: 0,\n      bottom_row: 0 \n    },\n     }\n\n  }\n\n  calculatefacevalue = (data) =>\n  {\n   const apiboxval = data.outputs[0].data.regions[0].region_info.bounding_box;\n   const imgdetail=document.getElementById(\"image\");\n   const imgwidth = Number(imgdetail.width);\n   const imgheight = Number(imgdetail.height);\n   const leftcol=apiboxval.left_col*imgwidth\n   const toprow=apiboxval.top_row*imgheight;\n   const rightcol=imgwidth - (apiboxval.right_col * imgwidth);\n   const bottomrow=imgheight - (apiboxval.bottom_row * imgheight);\n   console.log(leftcol,rightcol,toprow,bottomrow);\n \n   this.displayboundingbox(leftcol,rightcol,toprow,bottomrow);\n\n  }\n\n  displayboundingbox = (leftcol,rightcol,toprow,bottomrow) => {\n  this.setState(\n   {\n      boundingbox: {\n        left_col: leftcol,\n        right_col: rightcol,\n        top_row: toprow,\n        bottom_row: bottomrow \n      }\n    }\n )\n }\n\n  oninput = (event) => {\n        this.setState( { inputurl: event.target.value} );\n    }   \n\n  onsubmit = (event) => {\n    this.setState( { imageurl: this.state.inputurl} );\n    app.models.predict(\"a403429f2ddf4b49b307e318f00e528b\", this.state.inputurl)\n    .then(response => this.calculatefacevalue(response))\n    .catch(err => console.log(err));\n    }\n\n   changepage = (onpage) => {\n     \n      this.setState({onpage: onpage})\n      console.log(onpage);\n    }\n\n\n  render() {\n    const {imageurl, boundingbox} = this.state;\n\n      return (\n    \n    <div className=\"App\">\n      <Particles params={particleoptions} className=\"particles\"/>\n               <FaceDetection oninput={this.oninput} onsubmit={this.onsubmit}/>\n        <FaceDetectionFunctionality url={imageurl} boundingbox={boundingbox}/>\n        </div>\n           \n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}